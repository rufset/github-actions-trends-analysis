name: Studio - Build & Publish

on:
  push:
    tags:
      - "v*"
    paths-ignore:
      - "apps/sqltools/**"

jobs:

  release:
    runs-on: ${{ matrix.os }}
    env:
      SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.snapcraft_token }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, ubuntu-arm64, macos-13-xlarge]

    steps:
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.gpg_key }}
        if: "startsWith(matrix.os, 'ubuntu')"

      - name: Install dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
        if: "startsWith(matrix.os, 'windows')"

      - name: Install azuresigntool
        run: 'dotnet tool install --global AzureSignTool --version 4.0.1'
        if: "startsWith(matrix.os, 'windows')"

      - name: Check out Git repository
        uses: actions/checkout@v1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
        if: "startsWith(matrix.os, 'ubuntu-20.04')"

      - run: "curl -sLO https://github.com/deb-s3/deb-s3/releases/download/0.11.2/deb-s3-0.11.2.gem"
        if: "startsWith(matrix.os, 'ubuntu-20.04')"

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '16.11.14'
        if: "startsWith(matrix.os, 'windows')"

      - run: "gem install -N ./deb-s3-0.11.2.gem"
        if: "startsWith(matrix.os, 'ubuntu-20.04')"

      - name: "Install python 3.8 (NOT Mac, NOT Ubuntu-arm)"
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
        if: "!startsWith(matrix.os, 'macos') && (matrix.os != 'ubuntu-arm64')"

      - name: Install python 3.8 (mac)
        if: "startsWith(matrix.os, 'macos')"
        run: |
          # Install Python 3.8
          brew install python@3.8
          # Add Python 3.8 to PATH
          echo "/opt/homebrew/opt/python@3.8/libexec/bin" >> $GITHUB_PATH
          export PATH="/opt/homebrew/opt/python@3.8/libexec/bin:$PATH"
          export PYTHON_PATH="/opt/homebrew/opt/python@3.8/libexec/bin/python3"

      - name: Verify Python Version
        if: "startsWith(matrix.os, 'windows')"
        run: |
          $PYTHON_VERSION = python --version | Out-String
          Write-Output "Installed Python version: $PYTHON_VERSION"
          if (-not $PYTHON_VERSION.StartsWith("Python 3.8")) {
            Write-Output "Error: Python version does not start with 3.8"
            exit 1
          }
        shell: powershell

      - name: Verify Python Version
        if: "!startsWith(matrix.os, 'windows') && (matrix.os != 'ubuntu-arm64')"
        run: |
          PYTHON_VERSION=$(python3 --version | cut -d " " -f 2)
          echo "Installed Python version: $PYTHON_VERSION"
          if [[ ! $PYTHON_VERSION == 3.8* ]]; then
            echo "Error: Python version does not start with 3.8"
            exit 1
          fi

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: yarn

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v2
        if: startsWith(matrix.os, 'ubuntu')
        with:
          skip_install: ${{ matrix.os == 'ubuntu-arm64' }}

      # We manage snapcraft ourselves on the arm box
      # and it could have old credentials
      # this will force it to use the env
      # key defined at the top of this file.
      - name: Snapcraft - logout
        run: "snapcraft logout"
        if: startsWith(matrix.os, 'ubuntu-arm64')
        continue-on-error: true


      - name: Clean cache
        run: yarn cache clean --all

      # FIXME (matthew) Windows needs retries. It sometimes fails to build
      # the native oracledb package.
      # But only sometimes. I cannot figure out why.
      # Someone should at some point.
      - name: yarn install (with retry)
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          command: "yarn install --frozen-lockfile --network-timeout 100000"
        env:
          npm_config_node_gyp: ${{ github.workspace }}${{ runner.os == 'Windows' && '\node_modules\node-gyp\bin\node-gyp.js' || '/node_modules/node-gyp/bin/node-gyp.js' }}

      - name: Remove dist directory
        if: "!startsWith(matrix.os, 'windows')"
        run: rm -rf ./apps/studio/dist_electron
      - name: Remove dist directory windows
        if: startsWith(matrix.os, 'windows')
        run: Remove-Item dist_electron -Recurse -ErrorAction Ignore
      - name: Prepare for app notarization
        if: startsWith(matrix.os, 'macos')
        # Import Apple API key for app notarization on macOS
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.apple_key }}' > ~/private_keys/AuthKey_${{ secrets.apple_key_id }}.p8

      - name: Build and Publish (ARM Linux)
        run: cd apps/studio && ./build/arm-publish.sh
        if: startsWith(matrix.os, 'ubuntu-arm64')
        env:
          GH_TOKEN: ${{ secrets.github_token }}
          BT_TOKEN: ${{ secrets.bintray_apikey }}
          USE_SYSTEM_FPM: true
          SNAPCRAFT_BUILD_ENVIRONMENT: host

      - name: Build and Publish
        if: "!startsWith(matrix.os, 'ubuntu-arm64')"
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: apps/studio
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}
          skip_build: true
          args: ${{ startsWith(matrix.os, 'macos') && '--arm64 --x64' || '' }}
          use_vue_cli: true
          max_attempts: 2

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: true
          mac_certs: ${{ secrets.mac_dev }}
          mac_certs_password: ${{ secrets.mac_dev_pw }}
        env:
          APPLE_ID: ${{ secrets.apple_id }}
          APPLE_ID_PASSWORD: ${{ secrets.apple_id_password }}
          APPLE_TEAM_ID: "7KK583U8H2"
          KEYVAULT_AUTH: "${{secrets.keyvault_auth}}"
          KV_WIN_CERTIFICATE: "${{secrets.kv_win_certificate}}"
          PYTHON_PATH: "${{ startsWith(matrix.os, 'macos') && '/opt/homebrew/opt/python@3.8/libexec/bin/python3' || '$PYTHON_PATH' }}"
          PYTHONPATH: "${{ startsWith(matrix.os, 'macos') && '/opt/homebrew/opt/python@3.8/libexec/bin/python3' || '$PYTHONPATH' }}"

      - name: Publish DEB to S3
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          deb-s3 upload apps/studio/dist_electron/*.deb \
            --bucket=deb.beekeeperstudio.io \
            --lock \
            --sign=${{steps.import_gpg.outputs.keyid}} \
            --preserve-versions
        env:
          AWS_ACCESS_KEY_ID: "${{secrets.aws_access_key_id}}"
          AWS_SECRET_ACCESS_KEY: "${{secrets.aws_secret_access_key}}"
          AWS_DEFAULT_REGION: "us-east-1"
      - name: Invalidate cloudfront cache
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          aws cloudfront create-invalidation \
          --distribution "$DISTRIBUTION" \
          --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: "${{secrets.aws_access_key_id}}"
          AWS_SECRET_ACCESS_KEY: "${{secrets.aws_secret_access_key}}"
          DISTRIBUTION: ${{secrets.cloudfront_distribution}}
          AWS_DEFAULT_REGION: "us-east-1"
      - name: Cleanup artifacts
        if: "!startsWith(matrix.os, 'windows')"
        run: npx rimraf "apps/studio/dist_electron/!(*.exe|*.deb|*.rpm|*.AppImage|*.dmg|*.snap)"
      - name: Cleanup artifacts Win
        if: startsWith(matrix.os, 'windows')
        run: npx rimraf "apps/studio/dist_electron/!(*.exe)"
        continue-on-error: true
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.os }}
          path: apps/studio/dist_electron
