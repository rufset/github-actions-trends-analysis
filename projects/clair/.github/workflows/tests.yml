---
name: Tests

on:
  workflow_call:
    inputs:
      package_expr:
        required: true
        type: string
        description: 'Package expression(s) passed to `go test`'
      qemu:
        required: false
        type: boolean
        default: false
        description: 'Run tests for additional architectures under qemu'
      cd:
        required: false
        type: string
        default: ""
        description: 'Change to this directory before running tests'

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ['oldstable', 'stable']
    outputs:
      go-cache: ${{ steps.check.outputs.cache-hit == 'true' || steps.setup-go.outputs.cache-hit == 'true' || steps.warm.conclusion == 'success' }}
      runner-arch: ${{ steps.arch.outputs.result }}
    steps:
      - name: Map Arch
        id: arch
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            switch (process.env.RUNNER_ARCH) {
            case "X64":
              return "amd64";
            case "ARM64":
              return "arm64";
            default:
              core.setFailed(`unknown/unsupported architecture: ${process.env.RUNNER_ARCH}`);
            }
            return ""
      - name: Checkout
        if: ${{ inputs.cd == '' }}
        id: checkout
        uses: actions/checkout@v4
      - name: Check Go Version
        if: ${{ inputs.cd == '' && steps.checkout.conclusion == 'success' }}
        id: checkversion
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: false
      - name: Get ImageOS
        # There's no way around this, because "ImageOS" is only available to
        # processes, but the setup-go action uses it in its key.
        if: ${{ inputs.cd == '' && steps.checkout.conclusion == 'success' }}
        id: imageos
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            return process.env.ImageOS
      - name: Check Cache
        if: ${{ inputs.cd == '' && steps.checkout.conclusion == 'success' }}
        id: check
        uses: actions/cache/restore@v4
        with:
          key: >-
            setup-go-${{ runner.os }}-${{ steps.imageos.outputs.result }}-go-${{ steps.checkversion.outputs.go-version }}-${{ hashFiles('go.sum') }}
          lookup-only: true
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
      - name: Setup Go
        if: ${{ inputs.cd == '' && steps.check.outputs.cache-hit != 'true' }}
        id: setup-go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
      - name: Warm Cache on Miss
        id: warm
        if: ${{ inputs.cd == '' && steps.check.outputs.cache-hit != 'true' && steps.setup-go.outputs.cache-hit != 'true' }}
        run: |
          # Warm module+build cache
          for GOARCH in amd64 arm64 ppc64le s390x; do
            export GOARCH
            for mod in '' github.com/quay/clair/config github.com/quay/claircore github.com/quay/claircore/toolkit; do
              echo Downloading modules for "${mod-main}/$GOARCH"
              go mod download $mod
            done
            echo Building '"std"' for "$GOARCH"
            go build std
          done

  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: ['setup']
    strategy:
      matrix:
        go: ['oldstable', 'stable']
        platform: ${{ inputs.qemu && fromJSON('["amd64","arm64","ppc64le","s390x"]') || fromJSON('["amd64"]')}}
      fail-fast: false
    services:
      postgres:
        image: docker.io/library/postgres:15
        env:
          POSTGRES_DB: "clair"
          POSTGRES_INITDB_ARGS: "--no-sync"
          POSTGRES_PASSWORD: password
          POSTGRES_USER: "clair"
        options: >-
          --health-cmd "pg_isready -U clair"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432
      rabbitmq:
        image: docker.io/library/rabbitmq:3
        env:
          RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: '-rabbit vm_memory_high_watermark 0.85'
        ports:
          - 5672
          - 61613

    steps:
      - name: Configure RabbitMQ
        env:
          brokername: ${{ matrix.platform == needs.setup.outputs.runner-arch && 'localhost' || 'rabbitmq' }}
        run: |
          docker exec ${{ job.services.rabbitmq.id }} rabbitmqctl await_startup
          docker exec ${{ job.services.rabbitmq.id }} rabbitmq-plugins enable rabbitmq_stomp
          docker exec ${{ job.services.rabbitmq.id }} rabbitmq-plugins disable rabbitmq_management_agent rabbitmq_prometheus rabbitmq_web_dispatch
          docker exec ${{ job.services.rabbitmq.id }} rabbitmqctl add_vhost "${brokername}"
          docker exec ${{ job.services.rabbitmq.id }} rabbitmqctl set_permissions -p "${brokername}" guest '.*' '.*' '.*'
          docker exec ${{ job.services.rabbitmq.id }} rabbitmqctl add_user clair password
          docker exec ${{ job.services.rabbitmq.id }} rabbitmqctl set_permissions -p '/' clair '.*' '.*' '.*'
          docker exec ${{ job.services.rabbitmq.id }} rabbitmqctl set_permissions -p "${brokername}" clair '.*' '.*' '.*'

      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        id: setup-go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: ${{ needs.setup.outputs.go-cache }}
      - name: Assets Cache
        id: assets
        uses: actions/cache/restore@v4
        with:
          key: integration-assets-${{ hashFiles('go.sum') }}
          restore-keys: |
            integration-assets-
          path: |
            ~/.cache/clair-testing

      - name: Tests
        if: ${{ matrix.platform == needs.setup.outputs.runner-arch }}
        env:
          POSTGRES_CONNECTION_STRING: "host=localhost port=${{ job.services.postgres.ports[5432] }} user=clair dbname=clair password=password sslmode=disable"
          RABBITMQ_CONNECTION_STRING: "amqp://clair:password@localhost:${{ job.services.rabbitmq.ports[5672] }}/"
          STOMP_CONNECTION_STRING: "stomp://clair:password@localhost:${{ job.services.rabbitmq.ports[61613] }}/"
        working-directory: ./${{ inputs.cd }}
        run: |
          # Go Tests
          for expr in ${{ inputs.package_expr }}; do
            printf '::group::go test %s\n' "$expr"
            go test -tags integration "$expr"
            printf '::endgroup::\n'
          done

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ matrix.platform != needs.setup.outputs.runner-arch }}
        with:
          platforms: linux/${{ matrix.platform }}
      - name: Qemu Tests
        if: ${{ matrix.platform != needs.setup.outputs.runner-arch }}
        env:
          gover: ${{ steps.setup-go.outputs.go-version }}
          GOARCH: ${{ matrix.platform }}
        run: |
          # Go Tests
          mkdir -p ~/.cache/clair-testing "${RUNNER_TEMP}/vartmp"

          # Hopefully everything we use has their build tags correct.
          echo ::group::cross-compiling for "$GOARCH"
          CGO_ENABLED=0 go build ${{ inputs.package_expr }}
          echo ::endgroup::

          if [ -n "${RUNNER_DEBUG}" ]; then
            cat <<'.' > "${RUNNER_TEMP}/tests.sh"
          echo ::group::Inner Container Environment
          env
          echo ::endgroup::
          set -x
          .
          fi
          cat <<'.' >> "${RUNNER_TEMP}/tests.sh"
          for expr in ${{ inputs.package_expr }}; do
            printf '::group::go test %s\n' "$expr"
            go test -tags integration "$expr"
            printf '::endgroup::\n'
          done
          .

          cat <<'.' > "${RUNNER_TEMP}/env.list"
          CI
          POSTGRES_CONNECTION_STRING=host=postgres port=5432 user=clair dbname=clair password=password sslmode=disable
          RABBITMQ_CONNECTION_STRING=amqp://clair:password@rabbitmq:5672/
          STOMP_CONNECTION_STRING=stomp://clair:password@rabbitmq:61613/
          .

          docker run \
            --rm \
            --network '${{ job.container.network }}' \
            --platform 'linux/${{ matrix.platform }}' \
            --mount "type=bind,src=$(go env GOMODCACHE),dst=/go/pkg/mod" \
            --mount "type=bind,src=$(go env GOCACHE),dst=/root/.cache/go-build" \
            --mount "type=bind,src=${HOME}/.cache/clair-testing,dst=/root/.cache/clair-testing" \
            --mount "type=bind,src=$(pwd),dst=/build" \
            --mount "type=bind,src=${RUNNER_TEMP}/tests.sh,dst=/root/tests.sh" \
            --mount "type=bind,src=${RUNNER_TEMP}/vartmp,dst=/var/tmp" \
            --tmpfs /tmp:rw,exec,nosuid,nodev \
            --env-file "${RUNNER_TEMP}/env.list" \
            --workdir "/build/${{ inputs.cd }}" \
            "quay.io/projectquay/golang:${gover%.*}" \
            sh -e /root/tests.sh
