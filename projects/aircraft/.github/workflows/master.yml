# Build-script for the aircraft master branch
# Builds the A32NX and the A380X and uploads them to the CloudFlare CDN and GitHub Pre-Release Assets

name: master
on:
  push:
    branches:
      - master

jobs:
  build_a32nx:
    name: Build and deploy A32NX
    # Prevent running this on forks
    if: github.repository_owner == 'flybywiresim'
    runs-on: ubuntu-latest
    env:
      FBW_PRODUCTION_BUILD: 1
      A32NX_INSTRUMENTS_BUILD_WORKERS: 2
      MASTER_PRE_RELEASE_ID: 66067756
      MASTER_PRE_RELEASE_TAG: assets/master
      MASTER_ZIP_NAME: A32NX-master.7z
      VMASTER_PRE_RELEASE_ID: 32243965
      VMASTER_PRE_RELEASE_TAG: vmaster
      BUILD_DIR_NAME: master-a32nx
      AIRCRAFT_PROJECT_PREFIX: a32nx
      AIRCRAFT_VARIANT: a320-251n
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Set BUILT_DATE_TIME
        run: echo "BUILT_DATE_TIME=$(date -u -Iseconds)" >> $GITHUB_ENV
      - name: Create .env file
        run: |
          echo FBW_PRODUCTION_BUILD=1 >> fbw-a32nx/.env
          echo CLIENT_ID=\"${{ secrets.NAVIGRAPH_CLIENT_ID }}\" >> fbw-a32nx/.env
          echo CLIENT_SECRET=\"${{ secrets.NAVIGRAPH_CLIENT_SECRET }}\" >> fbw-a32nx/.env
          echo CHARTFOX_SECRET=\"${{ secrets.CHARTFOX_SECRET }}\" >> fbw-a32nx/.env
          echo SENTRY_DSN=\"${{ secrets.SENTRY_DSN }}\" >> fbw-a32nx/.env
          echo AIRCRAFT_PROJECT_PREFIX=\"${{ env.AIRCRAFT_PROJECT_PREFIX }}\" >> fbw-a32nx/.env
          echo AIRCRAFT_VARIANT=${{ env.AIRCRAFT_VARIANT }} >> fbw-a32nx/.env
          echo BUILD_DIR_NAME=${{ env.BUILD_DIR_NAME }} >> .env
          echo LOCALAZY_READ_KEY=${{ secrets.LOCALAZY_READ_KEY }} >> .env
          echo VITE_BUILD=false >> .env
      - name: Install dependencies
        run: |
          ./scripts/dev-env/run.sh ./scripts/setup.sh --clean
      - name: Build A32NX
        run: |
          ./scripts/dev-env/run.sh ./scripts/build_a32nx.sh --no-tty -j 4
          rm -rf fbw-a32nx/src
          docker system prune -af
      - name: Build ZIP files
        run: |
          df -h
          node ./scripts/fragment_a32nx.js
          cp ./fbw-a32nx/out/build-modules/modules.json ./fbw-a32nx/out/flybywire-aircraft-a320-neo/install.json
          node ./scripts/install-source_a32nx.js
          mkdir ./${{ env.BUILD_DIR_NAME }}
          cd ./fbw-a32nx/out/
          7z a -t7z -m0=lzma2 -mx=7 ../../${{ env.BUILD_DIR_NAME }}/${{ env.MASTER_ZIP_NAME }} ./flybywire-aircraft-a320-neo/
          cd ../../
      - name: Upload to CloudFlare CDN
        env:
          CLOUDFLARE_BUCKET_PASSWORD: ${{ secrets.CLOUDFLARE_BUCKET_PASSWORD }}
          CDN_BUCKET_DESTINATION: addons/a32nx/master
        run: |
          ./scripts/cf-cdn.sh $CDN_BUCKET_DESTINATION ./fbw-a32nx/out/build-modules
      - name: Delete old GitHub Pre-Release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: ${{ env.MASTER_PRE_RELEASE_TAG }}
          assets: "${{ env.MASTER_ZIP_NAME }}"
          fail-if-no-assets: false
      - name: Upload aircraft package to GitHub Pre-Release Assets
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.MASTER_PRE_RELEASE_ID }}/assets{?name,label}
          asset_path: ./${{ env.BUILD_DIR_NAME }}/${{ env.MASTER_ZIP_NAME }}
          asset_name: ${{ env.MASTER_ZIP_NAME }}
          asset_content_type: application/zip
      - name: Update GitHub Pre-Release Body
        run: |
          curl --request PATCH \
            --url 'https://api.github.com/repos/${{ github.repository }}/releases/${{ env.MASTER_PRE_RELEASE_ID }}' \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data-raw '{
              "body": "This pre-release has its asset updated on every commit to the master branch\nLast updated on ${{ env.BUILT_DATE_TIME }} from commit ${{ github.sha }}\nThis link will always point to the latest master build: https://github.com/${{ github.repository }}/releases/download/${{ env.MASTER_PRE_RELEASE_TAG }}/${{ env.MASTER_ZIP_NAME }}"
            }'

  build_a380x:
    name: Build and deploy A380X
    # Prevent running this on forks
    if: github.repository_owner == 'flybywiresim'
    runs-on: ubuntu-latest
    env:
      FBW_PRODUCTION_BUILD: 1
      MASTER_PRE_RELEASE_ID: 66067756
      MASTER_PRE_RELEASE_TAG: assets/master
      MASTER_ZIP_NAME: A380X-master.7z
      VMASTER_PRE_RELEASE_ID: 32243965
      VMASTER_PRE_RELEASE_TAG: vmaster
      BUILD_DIR_NAME: master-a380x
      AIRCRAFT_PROJECT_PREFIX: a380x
      AIRCRAFT_VARIANT: a380-842
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Set BUILT_DATE_TIME
        run: echo "BUILT_DATE_TIME=$(date -u -Iseconds)" >> $GITHUB_ENV
      - name: Create .env file
        run: |
          echo FBW_PRODUCTION_BUILD=1 >> fbw-a380x/.env
          echo CLIENT_ID=\"${{ secrets.NAVIGRAPH_CLIENT_ID_A380X }}\" >> fbw-a380x/.env
          echo CLIENT_SECRET=\"${{ secrets.NAVIGRAPH_CLIENT_SECRET_A380X }}\" >> fbw-a380x/.env
          echo CHARTFOX_SECRET=\"${{ secrets.CHARTFOX_SECRET }}\" >> fbw-a380x/.env
          echo SENTRY_DSN=\"${{ secrets.SENTRY_DSN }}\" >> fbw-a380x/.env
          echo AIRCRAFT_PROJECT_PREFIX=\"${{ env.AIRCRAFT_PROJECT_PREFIX }}\" >> fbw-a380x/.env
          echo AIRCRAFT_VARIANT=\"${{ env.AIRCRAFT_VARIANT }}\" >> fbw-a380x/.env
          echo BUILD_DIR_NAME=${{ env.BUILD_DIR_NAME }} >> .env
          echo LOCALAZY_READ_KEY=${{ secrets.LOCALAZY_READ_KEY }} >> .env
          echo VITE_BUILD=false >> .env
      - name: Install dependencies
        run: |
          ./scripts/dev-env/run.sh ./scripts/setup.sh --clean
      - name: Build A380X
        run: |
          ./scripts/dev-env/run.sh ./scripts/build_a380x.sh --no-tty -j 4
          rm -rf fbw-a380x/src
          docker system prune -af
      - name: Build ZIP files
        run: |
          df -h
          node ./scripts/fragment_a380x.js
          cp ./fbw-a380x/out/build-modules/modules.json ./fbw-a380x/out/flybywire-aircraft-a380-842/install.json
          node ./scripts/install-source_a380x.js
          mkdir ./${{ env.BUILD_DIR_NAME }}
          cd ./fbw-a380x/out/
          7z a -t7z -m0=lzma2 -mx=7 ../../${{ env.BUILD_DIR_NAME }}/${{ env.MASTER_ZIP_NAME }} ./flybywire-aircraft-a380-842/
          cd ../../
      - name: Upload to CloudFlare CDN
        env:
          CLOUDFLARE_BUCKET_PASSWORD: ${{ secrets.CLOUDFLARE_BUCKET_PASSWORD }}
          CDN_BUCKET_DESTINATION: addons/a380x/master
        run: |
          ./scripts/cf-cdn.sh $CDN_BUCKET_DESTINATION ./fbw-a380x/out/build-modules
      - name: Delete old GitHub Pre-Release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: ${{ env.MASTER_PRE_RELEASE_TAG }}
          assets: "${{ env.MASTER_ZIP_NAME }}"
          fail-if-no-assets: false
      - name: Upload aircraft package to GitHub Pre-Release Assets
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.MASTER_PRE_RELEASE_ID }}/assets{?name,label}
          asset_path: ./${{ env.BUILD_DIR_NAME }}/${{ env.MASTER_ZIP_NAME }}
          asset_name: ${{ env.MASTER_ZIP_NAME }}
          asset_content_type: application/zip
      - name: Update GitHub Pre-Release Body
        run: |
          curl --request PATCH \
            --url 'https://api.github.com/repos/${{ github.repository }}/releases/${{ env.MASTER_PRE_RELEASE_ID }}' \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data-raw '{
              "body": "This pre-release has its asset updated on every commit to the master branch\nLast updated on ${{ env.BUILT_DATE_TIME }} from commit ${{ github.sha }}\nThis link will always point to the latest master build: https://github.com/${{ github.repository }}/releases/download/${{ env.MASTER_PRE_RELEASE_TAG }}/${{ env.MASTER_ZIP_NAME }}"
            }'
