name: release
on:
  push:
    tags:
      - "v*"
      - "!v*-rc*"

jobs:
  build_a32nx:
    name: Build and publish A32NX
    runs-on: ubuntu-latest
    env:
      FBW_PRODUCTION_BUILD: 1
      STABLE_PRE_RELEASE_ID: 66067814
      STABLE_PRE_RELEASE_TAG: assets/stable
      STABLE_ZIP_NAME: A32NX-stable.7z
      BUILD_DIR_NAME: stable
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Create .env file
        run: |
          echo FBW_PRODUCTION_BUILD=1 >> fbw-a32nx/.env
          echo CLIENT_ID=\"${{ secrets.NAVIGRAPH_CLIENT_ID }}\" >> fbw-a32nx/.env
          echo CLIENT_SECRET=\"${{ secrets.NAVIGRAPH_CLIENT_SECRET }}\" >> fbw-a32nx/.env
          echo CHARTFOX_SECRET=\"${{ secrets.CHARTFOX_SECRET }}\" >> fbw-a32nx/.env
          echo SENTRY_DSN=\"${{ secrets.SENTRY_DSN }}\" >> fbw-a32nx/.env
          echo BUILD_DIR_NAME=${{ env.BUILD_DIR_NAME }} >> .env
          echo LOCALAZY_READ_KEY=${{ secrets.LOCALAZY_READ_KEY }} >> .env
          echo VITE_BUILD=false >> .env
      - name: Build A32NX
        run: |
          ./scripts/dev-env/run.sh ./scripts/setup.sh --clean
          ./scripts/dev-env/run.sh ./scripts/build.sh --no-tty -j 4
          rm -rf fbw-a32nx/src
          docker system prune -af
      - name: Build ZIP file
        run: |
          node ./scripts/fragment_a32nx.js

          cp ./fbw-a32nx/out/build-modules/modules.json ./fbw-a32nx/out/flybywire-aircraft-a320-neo/install.json
          node ./scripts/install-source_a32nx.js
          mkdir ./${{ env.BUILD_DIR_NAME }}
          cd ./fbw-a32nx/out/
          7z a -t7z -m0=lzma2 -mx=7  ../../${{ env.BUILD_DIR_NAME }}/${{ env.STABLE_ZIP_NAME }} ./flybywire-aircraft-a320-neo/
          cd ../..
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.BUILD_DIR_NAME }}/${{ env.STABLE_ZIP_NAME }}
          asset_name: ${{ env.STABLE_ZIP_NAME }}
          asset_content_type: application/zip
      - name: Upload to CloudFlare CDN
        env:
          CLOUDFLARE_BUCKET_PASSWORD: ${{ secrets.CLOUDFLARE_BUCKET_PASSWORD }}
          CDN_BUCKET_DESTINATION: addons/a32nx/stable
        run: |
          ./scripts/cf-cdn.sh $CDN_BUCKET_DESTINATION ./fbw-a32nx/out/build-modules
      - name: Delete old GitHub Pre-Release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: ${{ env.STABLE_PRE_RELEASE_TAG }}
          assets: "*"
          fail-if-no-assets: false
      - name: Upload aicraft package to GitHub Pre-Release Assets
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.STABLE_PRE_RELEASE_ID }}/assets{?name,label}
          asset_path: ./${{ env.BUILD_DIR_NAME }}/${{ env.STABLE_ZIP_NAME }}
          asset_name: ${{ env.STABLE_ZIP_NAME }}
          asset_content_type: application/zip
      - name: Upload fragments to GitHub Pre-Release Assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          release_id: ${{ env.STABLE_PRE_RELEASE_ID }}
          assets_path: ./build-modules/
      - name: Update GitHub Pre-Release Body
        run: |
          curl --request PATCH \
            --url 'https://api.github.com/repos/${{ github.repository }}/releases/${{ env.STABLE_PRE_RELEASE_ID }}' \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data-raw '{
              "body": "This pre-release has its asset updated on every release\nLast updated on ${{ env.BUILT_DATE_TIME }} from commit ${{ github.sha }}\nThis link will always point to the latest stable build: https://github.com/${{ github.repository }}/releases/download/${{ env.STABLE_PRE_RELEASE_TAG }}/${{ env.STABLE_ZIP_NAME }}"
            }'
