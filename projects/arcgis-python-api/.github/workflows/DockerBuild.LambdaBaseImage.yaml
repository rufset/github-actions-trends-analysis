name: DockerBuild.LambdaImage

on:
  # allow it to be run on-demand
  workflow_dispatch:
    inputs:
      version:
        description: "Version of ArcGIS API for Python to install in the image"
        type: string
        default: "2.2.0"
      python_version:
        description: "Python version to base image on"
        type: string
        default: "3.9"
      is_latest_release:
        description: "Version of ArcGIS API for Python is Latest current release"
        type: boolean
        default: false
      is_default_supported_python:
        description: "Python version is default supported version (i.e. python used by Pro and Enterprise)"
        type: boolean
        default: false

jobs:
  build-and-push:
    name: Build Docker image and push to ghcr.io
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/esri/arcgis-python-api-lambda
          tags: |
            type=raw,value=${{ inputs.version }}-python${{ inputs.python_version }}
            type=raw,value=${{ inputs.version }},enable=${{ inputs.is_default_supported_python && github.ref_name == github.event.repository.default_branch }}
            type=raw,value=latest,enable=${{ inputs.is_latest_release && inputs.is_default_supported_python && github.ref_name == github.event.repository.default_branch }}
            type=schedule,pattern={{date 'YY.MM'}},enable=${{ inputs.is_latest_release && inputs.is_default_supported_python && github.ref_name == github.event.repository.default_branch }}

      - id: docker_build
        name: Build image and push to GitHub Container Registry
        uses: docker/build-push-action@v4
        with:
          # relative path to the place where source code with Dockerfile is located
          context: .
          file: ./docker/LambdaBaseImage.Dockerfile
          build-args: |
            python_version=${{ inputs.python_version }}
            arcgis_version=${{ inputs.version }}
          tags: ${{ steps.meta.outputs.tags }}
          provenance: false
          platforms: linux/amd64
          push: true