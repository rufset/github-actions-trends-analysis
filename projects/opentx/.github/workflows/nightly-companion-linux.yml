name: Nightly - Linux Companion

on:
  workflow_run:
    workflows: ["Nightly - Companion"]
    types:
      - completed
     
  workflow_dispatch:
     
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04

    steps:      
    - name: Init
      run: sudo apt update
      
    - name: Install dependencies
      run: sudo apt-get -y install build-essential cmake gcc git lib32ncurses6 lib32z1 libfox-1.6-dev libsdl1.2-dev
          qt5-default qtmultimedia5-dev qttools5-dev qttools5-dev-tools libqt5svg5-dev
          software-properties-common wget zip libgtest-dev libclang1-7 python3-pip
          
    - name: Install ARM toolchain
      uses: fiam/arm-none-eabi-gcc@v1
      with:
        release: '6-2017-q2'

    - name: Install pillow      
      run: python -m pip install filelock clang pillow

    - name: Check out the repo
      uses: actions/checkout@v3

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: Build
      working-directory: ${{github.workspace}}
      shell: bash
      # Execute the build. You can specify a specific target with "--target <NAME>"
      run: mkdir ${{github.workspace}}/output && tools/build-companion-nightly.sh ${{github.workspace}}  ${{github.workspace}}/output/
      
    - uses: pyTooling/Actions/releaser@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: 'nightly'
        files: ${{github.workspace}}/output/*.deb
   
